# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

# VIM-LIKE COMMANDS WITH `,` LEADER
# Selectors to make keybindings word in vim normal mode, and
# within Atom where vim mode is not active (avoids keybindings
# being triggered when in vim insert mode)
'atom-text-editor:not(.vim-mode), atom-text-editor.vim-mode.normal-mode':

  # PLUGIN                                      # MNEMONIC

  # term3
  ', t': 'term3:open'                           # terminal
  ', t v': 'term3:open-split-down'              # terminal vertical

  # fuzzy-finder
  'ctrl-p': 'fuzzy-finder:toggle-file-finder'   # I mean, CTRL-P

  # atom-fuzzy-grep
  ', f': 'fuzzy-grep:toggle'                    # find
  ', f l': 'fuzzy-grep:toggleLastSearch'        # find last
